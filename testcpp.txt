#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <queue>
typedef char  BTDataType; 
typedef struct BinaryTreeNode
{
    BTDataType _data;
      struct BinaryTreeNode* _left;
        struct BinaryTreeNode* _right;

}BTNode;

std::queue<BTNode*> q;
// 通过前序遍历的数组"ABD##E#H##CF##G##"构建二叉树
 BTNode* BinaryTreeCreate(BTDataType* a, int n, BTNode*bt )
{
  assert(a);
  if(a[0]=='#')
    return NULL;
  if(n)
  bt->_data=a[0];
  BinaryTreeCreate(a+1,n-1,bt->_left);;
  BinaryTreeCreate(a+1,n-1,bt->_right);
return bt;
}

void BinaryTreeDestory(BTNode** root)
{
assert(root);
BTNode* tail=*root;
if(tail==NULL)
  return ;
BinaryTreeDestory(&tail->_left);
BinaryTreeDestory(&tail->_right);
free(tail);
root=NULL;
}
// // 二叉树节点个数
 int BinaryTreeSize(BTNode* root)
{
  if(root==NULL)
    return 0;
  return BinaryTreeSize(root->_left)+BinaryTreeSize(root->_right)+1;
  
}
// // 二叉树叶子节点个数
 int BinaryTreeLeafSize(BTNode* root) 
{
  if(root==NULL)
    return 0;
  if(root->_left==NULL &&root->_right==NULL )
    return 1;
  return BinaryTreeLeafSize(root->_left)+BinaryTreeLeafSize(root->_right);
}

//k层节点个数
  static int n=0;
int BinaryTreeLevelKSize(BTNode* root, int k)
{
if(root==NULL ||k<1)
  return 0;
if(k==1 && root!=NULL)
{
  ++n;
  --k;
}
return BinaryTreeLevelKSize(root->_left,k)+BinaryTreeLevelKSize(root->_right,k+1);
}
// // 二叉树查找值为x的节点
 BTNode* BinaryTreeFind(BTNode* root, BTDataType x)
{
if(root==NULL)
  return NULL;
if(root->_data==x)
  return root;
 BinaryTreeFind(root->_left,x); 
 BinaryTreeFind(root->_right,x);
 return NULL;
}
// // 二叉树前序遍历 
 void BinaryTreePrevOrder(BTNode* root)
{
  if(root == NULL)
    return;
  printf("%c\t",root->_data);
  BinaryTreePrevOrder(root->_left);
  BinaryTreePrevOrder(root->_right);
}
// // 二叉树中序遍历
 void BinaryTreeInOrder(BTNode* root)
{
if(!root)
  return ;
BinaryTreeInOrder(root->_left);
printf("%c\t",root->_data);
BinaryTreeInOrder(root->_right);
}
// // 二叉树后序遍历
 void BinaryTreePostOrder(BTNode* root)
{
  assert(root);
  if(!root)
    return ;
  BinaryTreePostOrder(root->_left);
  BinaryTreePostOrder(root->_right);
  printf("%c\t",root->_data);
}
// // 层序遍历
void BinaryTreeLevelOrder(BTNode* root)
{
  assert(root);
  q.push(root);
while(!q.empty())
{
  printf("%c\t",root->_data);
  if(root->_left)
  q.push(root->_left);
  if(root->_right)
  q.push(root->_right);
  root=q.front();
  q.pop();
}
}
// // 判断二叉树是否是完全二叉树
 int BinaryTreeComplete(BTNode* root)
{
  if(root==NULL)
    return 1;
if(root->_left->_data=='#' && root->_right->_data !='#')
  return 0;
if(root->_left->_data!='#'  && root->_right->_data=='#'   &&root->_left->_left->_data  !='#'&&root->_left->_right->_data!='#')
  return 0;
}

